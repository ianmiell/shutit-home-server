# We assert here that we are running as root
SEND whoami
ASSERT_OUTPUT root


# Check this is Ubuntu
SEND lsb_release -d -s | awk '{print $1}'
ASSERT_OUTPUT Ubuntu

# We assert here the user imiell was set up by the OS installation process
SEND cut -d: -f1 /etc/passwd | grep imiell | wc -l
ASSERT_OUTPUT 1

RUN usermod -aG sudo imiell

# Add a nexus user
IF_NOT RUN id -u nexus
	RUN useradd nexus
ENDIF

# Install required packages
# Required for gems
INSTALL libtool
INSTALL autoconf
# gems requirements done
INSTALL maven
INSTALL postgresql
INSTALL libreoffice
INSTALL socat
INSTALL etherwake
INSTALL openssh-server
INSTALL run-one
INSTALL apache2
INSTALL vim
INSTALL python-pip
INSTALL meld
INSTALL tmux
INSTALL openjdk-8-jre
INSTALL alien
INSTALL brasero
INSTALL virtualbox
INSTALL moreutils
INSTALL git
INSTALL git-extras
INSTALL npm
INSTALL nodejs-legacy
INSTALL asciidoc
INSTALL asciidoctor
INSTALL awscli
INSTALL python3-pip
INSTALL jq
INSTALL fslint
INSTALL pylint
INSTALL apt-file
INSTALL shellcheck
INSTALL sqlite3
INSTALL golang-go
INSTALL vagrant
INSTALL gnuplot
INSTALL ubuntu-desktop
INSTALL virtualbox-guest-dkms
INSTALL ioping
INSTALL sysstat
INSTALL fdupes
INSTALL ubuntu-gnome-desktop^
# For authoring
INSTALL pandoc
# For sec standards
INSTALL auditd
INSTALL nmap
# X disk usage analyser
INSTALL xdiskusage
# ncurses disk usage analyser
INSTALL ncdu
INSTALL btrfs-tools
# For Jenkins
INSTALL groovy
# IPTables state viewer
INSTALL iptstate
# fail2ban - ban IPs of failing ssh queries
INSTALL fail2ban
# Text-only browser
INSTALL links
# Tasksel - see notes/ubuntu
INSTALL tasksel
INSTALL php
INSTALL libapache2-mod-php
RUN apt-file update
RUN apt-get autoremove -y
RUN pip install --upgrade pip

# ShutIt should be installed already, naturally
#RUN pip install shutit
RUN pip install -U requests
RUN pip install -U coverage
RUN pip install -U python-twitter
RUN pip install -U setuptools
RUN pip install -U twine

# Let's encrypt: https://certbot.eff.org/#ubuntuxenial-apache
RUN apt-get -y install software-properties-common
RUN add-apt-repository -y ppa:certbot/certbot
RUN apt-get -y update
INSTALL python-certbot-apache

# Handbrake
RUN add-apt-repository -y ppa:stebbins/handbrake-releases
RUN apt-get -y update
INSTALL handbrake-cli

# Powershell
RUN curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
# Register the Microsoft Ubuntu repository
RUN curl https://packages.microsoft.com/config/ubuntu/16.04/prod.list | sudo tee /etc/apt/sources.list.d/microsoft.list
# Update apt-get
RUN apt-get update
# https://packages.ubuntu.com/en/xenial/amd64/libicu55/download
RUN wget -q http://security.ubuntu.com/ubuntu/pool/main/i/icu/libicu55_55.1-7ubuntu0.3_amd64.deb
RUN dpkg -i libicu55_55.1-7ubuntu0.3_amd64.deb
# Install PowerShell
INSTALL powershell

# Install docker
IF_NOT RUN docker version
	INSTALL apt-transport-https
	INSTALL ca-certificates
	INSTALL curl
	INSTALL software-properties-common
	RUN curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
	RUN add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
	RUN apt-get update
	RUN apt install -y docker-ce
ENDIF
# Add imiell to the docker user group
RUN usermod -G docker -a imiell
RUN usermod -G staff -a imiell

# youtube-dl
IF_NOT FILE_EXISTS /usr/local/bin/youtube-dl
	RUN wget https://yt-dl.org/latest/youtube-dl -O /usr/local/bin/youtube-dl
	RUN chmod a+x /usr/local/bin/youtube-dl
	RUN hash -r
ENDIF

# Set up local storage
RUN mkdir -p /media/storage_{1,2}

# Create space folder and chown it to imiell
RUN mkdir -p /space && chown imiell: /space
RUN mkdir -p /space/git

# for inspec tests
IF_NOT RUN inspec version
	RUN gem install inspec
ENDIF
# Asciidoc extras
RUN gem install --pre asciidoctor-pdf
RUN gem install coderay pygments.rb tilt slim

# Generate an ssh key
IF_NOT FILE_EXISTS /home/imiell/.ssh/id_rsa.pub
	RUN ssh-keygen
	# Note that the response to 'already exists' below prevents overwrite here.
	EXPECT_MULTI ['file in which=','empty for no passphrase=','Enter same passphrase again=','already exists=n']
ENDIF

# Apache
RUN a2enmod proxy
RUN a2enmod proxy_http
RUN a2enmod proxy_ajp
RUN a2enmod rewrite
RUN a2enmod deflate
RUN a2enmod headers
RUN a2enmod proxy_balancer
RUN a2enmod proxy_connect
RUN a2enmod proxy_html
RUN a2enmod php7.0

# Vagrant 1.8.6 required
#IF_NOT RUN vagrant version
#	RUN wget https://releases.hashicorp.com/vagrant/1.8.6/vagrant_1.8.6_x86_64.deb
#	RUN dpkg -i vagrant_1.8.6_x86_64.deb
#	RUN rm vagrant_1.8.6_x86_64.deb
#ENDIF

# Jenkins
RUN mkdir -p /var/jenkins
RUN chown imiell: /var/jenkins


#https://ubuntuforums.org/showthread.php?t=1842371 - speed up login
RUN sed -i 's/hosts:.*NOTFOUND.*/hosts: files dns/' /etc/nsswitch.conf

#REPLACE_LINE ['filename=/tmp/test2','line=asd','pattern=asd']
ENSURE_LINE ['filename=/etc/security/limits.conf','line=nexus - nofile 65536','pattern=nexus - nofile.*']
ENSURE_LINE ['/etc/systemd/logind.conf','HandleLidSwitch=ignore']
RUN systemd restart systemd-logind.service
ENSURE_LINE ['/etc/UPower/UPower.conf','IgnoreLid=true']
RUN systemd restart upower.service
ENSURE_LINE ['/etc/NetworkManager/conf.d/default-wifi-powersave-on.conf','wifi.powersave = 2']

# Takes effect on next reboot
# https://unix.stackexchange.com/questions/269661/how-to-turn-off-wireless-power-management-permanently
RUN sed -i 's/wifi.powersave.*/wifi.powersave = 2/' /etc/NetworkManager/conf.d/default-wifi-powersave-on.conf

#IF_NOT RUN chef
#	RUN wget https://packages.chef.io/files/stable/chefdk/2.3.4/ubuntu/16.04/chefdk_2.3.4-1_amd64.deb
#	RUN apt-get install chefdk_2.3.4-1_amd64.deb
#	RUN gem install rake
#	RUN gem install rubocop
#	RUN gem install cookstyle
#ENDIF

# Sysstat
RUN sed -i 's/^ENABLED.*/ENABLED="true"/' /etc/default/sysstat

# Auditd
IF_NOT RUN grep -- '-a exit,always -F arch=b64 -S execve' /etc/audit/audit.rules
	RUN echo '-a exit,always -F arch=b64 -S execve' >> /etc/audit/audit.rules
ENDIF
IF_NOT RUN grep -- '-a exit,always -F arch=b32 -S execve' /etc/audit/audit.rules
	RUN echo '-a exit,always -F arch=b32 -S execve' >> /etc/audit/audit.rules
ENDIF

RUN apt -y upgrade

# Log me in as imiell
USER imiell
# If it's not been done before, check out my dotfiles and set it up
IF_NOT FILE_EXISTS /home/imiell/.dotfiles
	RUN cd /home/imiell
	RUN git clone --depth=1 https://github.com/ianmiell/dotfiles ~imiell/.dotfiles
	RUN cd .dotfiles
	RUN ./script/bootstrap
	EXPECT_MULTI ['What is your github author name=Ian Miell','What is your github author email=ian.miell@gmail.com','verwrite all=O']
ENDIF

# Git repos
RUN cd /space/git

# jid jq explorer
# TODO install go
#RUN go get -u github.com/simeji/jid/cmd/jid

# Asciidoc for user imiell also?
#RUN gem install --pre asciidoctor-pdf
#RUN gem install coderay pygments.rb tilt slim


## All mine - takes too long!
#RUN wget -qO- 'https://api.github.com/users/ianmiell/repos?per_page=100&page=1' | grep full_name  | awk '{print $2}' | sed 's/^.\(.*\)",/git clone --recursive https:\/\/github.com\/\1/' | sh
#RUN wget -qO- 'https://api.github.com/users/ianmiell/repos?per_page=100&page=2' | grep full_name  | awk '{print $2}' | sed 's/^.\(.*\)",/git clone --recursive https:\/\/github.com\/\1/' | sh
#RUN wget -qO- 'https://api.github.com/users/ianmiell/repos?per_page=100&page=3' | grep full_name  | awk '{print $2}' | sed 's/^.\(.*\)",/git clone --recursive https:\/\/github.com\/\1/' | sh

# tmux plugin manager
IF_NOT FILE_EXISTS /home/imiell/.tmux/plugins/tpm
	RUN git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
ENDIF

# Generate an ssh key
IF_NOT FILE_EXISTS /home/imiell/.ssh/id_rsa.pub
	RUN ssh-keygen
	# Note that the response to 'already exists' below prevents overwrite here.
	EXPECT_MULTI ['file in which=','empty for no passphrase=','Enter same passphrase again=','already exists=n']
ENDIF

LOGOUT


RUN chown -R imiell: /space

# TODO: add these lines to /etc/sysctl.d/99-sysctl.conf and run sysctl -p
#net.ipv4.icmp_ratelimit = 100
#net.ipv4.icmp_ratemask = 88089
#net.ipv4.tcp_timestamps = 0
#net.ipv4.conf.all.arp_ignore = 1
#net.ipv4.conf.all.arp_announce = 2
#net.ipv4.tcp_rfc1337 = 1
#net.ipv4.conf.default.accept_source_route = 0
#net.ipv4.conf.default.accept_redirects = 0
#net.ipv4.conf.all.secure_redirects = 0
#net.ipv4.conf.default.send_redirects = 1
#net.ipv4.conf.all.log_martians = 1
#net.ipv4.conf.default.log_martians = 1
#net.ipv6.conf.all.disable_ipv6 = 1
#net.ipv4.conf.default.secure_redirects = 0
#net.ipv4.conf.default.send_redirects = 0
#net.ipv6.conf.default.accept_redirects = 0
#net.ipv6.conf.default.router_solicitations = 0
#net.ipv6.conf.default.accept_ra_rtr_pref = 0
#net.ipv4.conf.all.send_redirects = 0
#net.ipv6.conf.all.accept_redirects = 0
#net.ipv6.conf.default.accept_ra_pinfo = 0
#net.ipv6.conf.default.accept_ra_defrtr = 0
#net.ipv6.conf.all.accept_ra = 0
#net.ipv6.conf.default.autoconf = 0
#net.ipv6.conf.default.dad_transmits = 0
#net.ipv6.conf.default.accept_ra = 0
#net.ipv6.conf.default.max_addresses = 1
#kernel.sysrq = 0

IF_NOT RUN npm -g ll mermaid
	RUN npm install -g mermaid > /dev/null 2>&1
ENDIF
IF_NOT RUN which gtop
	RUN npm install -g gtop > /dev/null 2>&1
ENDIF


# INSPECS
RUN cd /space/git
IF_NOT FILE_EXISTS /space/git/inspec-profiles
	RUN git clone  https://github.com/ianmiell/inspec-profiles
ENDIF
RUN cd inspec-profiles/dev-sec-wrapper
RUN inspec exec . || true
# * CIS Docker Benchmark dev-sec/cis-docker-benchmark
# * CIS Kubernetes Benchmark dev-sec/cis-kubernetes-benchmark
# * DevSec MySQl Baseline dev-sec/mysql-baseline
# * DevSec Nginx Baseline dev-sec/nginx-baseline
# * inspec_java awim/inspec_java
# * InSpec Wrapper Profile Example adamleff/inspec-wrapper-profile-example
# * profile-test bigbam505/profile-test
# * SSL Certificate - InSpec Profile alexpop/ssl-certificate-profile
# * /tmp Compliance Profile nathenharvey/tmp-compliance-profile
# * utils alfresco/utils
# * WannaCry Exploit Mitigation adamleff/wannacry-exploit


# Pull my dev tools image from Dockerhub
#RUN docker pull imiell/docker-dev-tools-image
